kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
test1 = df2 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) #remove observations with more than an average of 500 pounds of food per day
df3 = df2 %>%
group_by(Client.File.Number) %>%
summarise(no_dates = n(),
max_food = max(Food.Provided.for),
min_food = min(Food.Provided.for),
mean_food_pounds_per_day = mean(Food.Pounds))
test1 = df3 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) #remove observations with more than an average of 500 pounds of food per day
test1$family = as.factor(ifelse(test1$max_food>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day)))
df2 %>%
group_by(Client.File.Number)  %>%
summarise(Number_of_Visits = n(),
First_Visit_Year = as.numeric(first(Year)),
Last_Visit_Year = as.numeric(last(Year)),
Range = Last_Visit_Year-First_Visit_Year + 1) %>%
arrange(desc(Number_of_Visits), desc(Range), First_Visit_Year) %>%
head(10) %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
arrange(df3, desc(max_food))
arrange(df3, desc(max_food))
head(arrange(df3, desc(max_food)),5)
#create a dataset df2 that only keeps dates of interest and drops rows with missing data from food variables
df2 = df1 %>%
arrange(Client.File.Number,Date) %>%
select(Date, Client.File.Number,Food.Provided.for, Food.Pounds,Year) %>%
filter(Date >= "2001-01-01")%>% #to stay up to date with current trends, we will only examine data in the last 10 years (2001-01-01 to 2018-12-31)
filter(Date <= "2018-12-31") %>%
drop_na(Food.Provided.for, Food.Pounds)  #only keep rows that do not have missing variables food.provided.for and food.pounds
#create dataset df3 that contains summaries per ID: number of visits, maximum number of family members over all visits, minimum number of family members over all visits, mean pounds of food per visit.
df3 = df2 %>%
group_by(Client.File.Number) %>%
summarise(Number_of_Visits = n(),
max_food = max(Food.Provided.for),
min_food = min(Food.Provided.for),
mean_food_pounds_per_day = mean(Food.Pounds))
head(arrange(df3, desc(max_food)),5)
head(arrange(df3, desc(max_food)),10)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food)) %>%
head(10)
```{r remove outliers, echo=FALSE}
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food)) %>%
head(10)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food)) %>%
head(10)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F,  position = "float_left")
df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = Fm position = "float_right")
test1 = df3 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) #remove observations with more than an average of 500 pounds of food per day
test1$family = as.factor(ifelse(test1$max_food>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
#define family as more than 1 person, as assumed by "provided.food.for"
#7423 observations
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day)))
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F,  position = "float_left")
df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "float_right")
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F,  position = "float_left")
df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "float_right")
t1=df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F,  position = "float_left")
t2=df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "float_right")
knitr::kable(list(t1, t2))
t1=df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable()# %>%
t2=df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(5)  %>%
kable() #%>%
knitr::kable(list(t1, t2))
t2=df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(5)#  %>%
knitr::kable(list(t1, t2))
t1=df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(5) # %>%
#  kable()# %>%
# kable_styling(bootstrap_options = "striped", full_width = F,  position = "float_left")
t2=df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(5)#  %>%
#  kable() #%>%
#  kable_styling(bootstrap_options = "striped", full_width = F, position = "float_right")
knitr::kable(list(t1, t2))
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(3)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
select(Client.File.Number, Number_of_Visits, max_food, mean_food_pounds_per_day) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
select(Client.File.Number, Number_of_Visits, max_food, mean_food_pounds_per_day) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
select(Client.File.Number, Number_of_Visits, max_food, mean_food_pounds_per_day) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
test1 = df3 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) #remove observations with more than an average of 500 pounds of food per day
test1$family = as.factor(ifelse(test1$max_food>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day)))
After examining our population, we see that there is one observation with 650 family members, one with 200 family members, and one with 115 family members. Since these are both extreme outliers, and likely mistakes, we remove these observations from our analysis. Likewise, there appears to be typos regarding average pounds of food per household per day. Thus, we remove observations with more than an average of 100 pounds of food per day, since there was a big jump from less than 100 lbs to over 150 lbs (with few observations). In the table below, we display the top 10 households sorted by average pounds of food from the food pantry per day in descending order. For example, the household with the largest average pounds of food per day is household 15022 with about 86 lbs, with a total of 7 visits and 4 total members in the family.
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day)),10)
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day), desc(Number_of_Visits)),10)
test1 = df3 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) %>%#remove observations with more than an average of 500 pounds of food per day
select(Client.File.Number,Number_of_Visits,max_food,mean_food_pounds_per_day)
test1$family = as.factor(ifelse(test1$max_food>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day), desc(Number_of_Visits)),10)
test1 = df3 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) %>%#remove observations with more than an average of 500 pounds of food per day
select(Client.File.Number,Number_of_Visits,mean_food_pounds_per_day)
test1$family = as.factor(ifelse(test1$max_food>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day), desc(Number_of_Visits)),10)
test1 = df3 %>% filter(max_food==min_food) %>% #subset those with same number of family members (1+) each visit
filter(max_food >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(max_food <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) %>%#remove observations with more than an average of 500 pounds of food per day
select(Client.File.Number,Number_of_Visits,max_food,mean_food_pounds_per_day)
select(Client.File.Number, Number_of_Visits, Number_of_Members, mean_food_pounds_per_day) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
mutate(Number_of_Members = max_food) %>%
select(Client.File.Number, Number_of_Visits, Number_of_Members, mean_food_pounds_per_day) %>%
arrange(desc(mean_food_pounds_per_day),desc(max_food)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df3 %>% filter(max_food==min_food) %>%
mutate(Number_of_Members = max_food) %>%
select(Client.File.Number, Number_of_Visits, Number_of_Members, mean_food_pounds_per_day) %>%
arrange(desc(mean_food_pounds_per_day),desc(Number_of_Members)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df4 = df3 %>% filter(max_food==min_food) %>%
mutate(Number_of_Members = max_food) %>%
select(Client.File.Number, Number_of_Visits, Number_of_Members, mean_food_pounds_per_day) %>%
arrange(desc(max_food), desc(mean_food_pounds_per_day)) %>%
select(Client.File.Number, Number_of_Visits, max_food, mean_food_pounds_per_day) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df4 = df3 %>% filter(max_food==min_food) %>%
mutate(Number_of_Members = max_food) %>%
select(Client.File.Number, Number_of_Visits, Number_of_Members, mean_food_pounds_per_day)
df4 %>% arrange(desc(Number_of_Members), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
df4 %>%
arrange(desc(mean_food_pounds_per_day),desc(Number_of_Members)) %>%
head(15)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
test1 = df4 %>%
filter(Number_of_Members >0) %>% #remove observations who do not take food from UMD since we are only examining those who take food
filter(Number_of_Members <= 100) %>% #remove the observation with 200 family members (likely a typo)
filter(mean_food_pounds_per_day <= 100) %>%#remove observations with more than an average of 500 pounds of food per day
select(Client.File.Number,Number_of_Visits,Number_of_Members,mean_food_pounds_per_day)
test1$family = as.factor(ifelse(test1$Number_of_Members>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
#define family as more than 1 person, as assumed by "provided.food.for"
#7423 observations
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day), desc(Number_of_Visits)),10)
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day), desc(Number_of_Visits),desc(Number_of_Members)),10)
#View(test1)
head(arrange(test1, desc(mean_food_pounds_per_day), desc(Number_of_Visits),desc(Number_of_Members)),5)
df4 %>% arrange(desc(Number_of_Members), desc(mean_food_pounds_per_day)) %>%
head(5)  %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
test1 %>%
group_by(family) %>%
summarise("Total Count" = n())
#    Family      Total_family
#      0         3405
#      1         3786
test1 %>%
group_by(family) %>%
summarise("Total Count" = n()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
#    Family      Total_family
#      0         3405
#      1         3786
test1 %>%
group_by(family) %>%
summarise("Total Count" = n()) %>%
kable() %>%
kable_styling( full_width = F)
test1 %>%
group_by(family) %>%
summarise("Total Count" = n()) %>%
kable() %>%
kable_styling( bootstrap_options = "striped",full_width = F)
#    Family      Total_family
#      0         3405
#      1         3786
####################FIG 1######################
#Boxplot of avg pounds of food per household per day, comparing single-member households vs. family households
#As expected, those with families have much higher averages per day, also higher outliers
levels(test1$family) <- c("Single", "Family")
test1 %>% ggplot(aes(x=family, y=mean_food_pounds_per_day, fill=family))+
geom_boxplot(aes(fill=family))+
theme_bw() + theme(panel.border = element_blank())+
labs(x="Household Type",
y="Average number of pounds of food per day",
title ="Fig 1: Boxplot of average pounds of food per day by household type")+
scale_fill_manual(values=c("lightslateblue","steelblue1"))
ggsave("Project1_Fig1_Box.png", height=5, width=7)
install.packages("gapminder")
library(gapminder)
gapminder
library(tidyverse)
gapminder %>% filter(year > 1990)
stdout = gapminder %>% filter(year > 1990)
setwd("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3/data")
dat = read.csv("export_dataframe", header = TRUE)
dat = read.csv("export_dataframe.csv", header = TRUE)
head(dat)
library(ggplot2)
library(tidyverse)
head(dat)
dat %>%
ggplot(aes(x=Client.Primary.Race))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar()
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
)) +
ggplot(aes(x=reorder(f.Client.Primary.Race, -Total.Nights)) +
dat %>%
ggplot(aes(x=reorder(f.Client.Primary.Race, -Total.Nights))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=reorder(f.Client.Primary.Race, -Total.Nights), y= Total.Nights)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- ggplot(dat, aes(x = reorder(f.name, -Total.Nights), y = Total.Nights))
p <- p + geom_bar(stat="identity", color='skyblue',fill='steelblue')
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
p <- ggplot(dat, aes(x = reorder(f.Client.Primary.Race, -Total.Nights), y = Total.Nights))
p <- p + geom_bar(stat="identity", color='skyblue',fill='steelblue')
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
p <- ggplot(dat, aes(x = reorder(Client.Primary.Race, -Total.Nights), y = Total.Nights))
p <- p + geom_bar(stat="identity", color='skyblue',fill='steelblue')
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
head(dat$Total.Nights)
max(dat$Total.Nights)
min(dat$Total.Nights)
count(dat$Total.Nights)
nrow(dat$Total.Nights)
range(dat$Total.Night)
range(dat$Total.Nights)
head(dat$Total.Nights,100)
nrow(dat)
ggplot(aes(x=reorder(f.Client.Primary.Race, -count, y= Total.Nights)) +
dat %>%
ggplot(aes(x=reorder(f.Client.Primary.Race, -count), y= Total.Nights)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar(stat="identity", color='skyblue',fill='steelblue') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar(stat="identity", fill='steelblue') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_bw()
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme_bw(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Gender)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Ethnicity)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Ethnicity)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Gender)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Ethnicity)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), main = "Hello")
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), title = "Hello")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
setwd("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3/data")
dat = read.csv("export_dataframe.csv", header = TRUE)
plot(dat$Total.Nights)
plot(dat$Client.Age.at.Entry)
ggplot(dat, aes(x = dat$Client.Age.at.Entry)) + geom_histogram() + facet_wrap(~Client.Gender)
colnames(dat)
setwd("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3")
dat = read.csv("/export_dataframe.csv", header = TRUE)
dat = read.csv("export_dataframe.csv", header = TRUE)
setwd("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3/data")
dat = read.csv("export_dataframe.csv", header = TRUE)
dat = read.csv("export_dataframe.csv", header = TRUE)
library(ggplot2)
library(tidyverse)
setwd("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3/data")
dat = read.csv("export_dataframe.csv", header = TRUE)
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat %>%
ggplot(aes(x=Client.Primary.Race)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(dat)
dat_noID = dat[-c(1,2,3,4),]
head(dat_noID)
colnames(dat_noID)
dat_noID = dat[,-c(1,2,3,4)]
colnames(dat_noID)
summary(dat_noID)
dat$Client.Gender <- as.factor(dat$Client.Gender)
ggplot(dat, aes(x = dat$Client.Age.at.Entry)) + geom_histogram() + facet_wrap(~Client.Gender)
plot(dat, col='blue', pch=20, cex=2, main="Relationship between Speed and Stopping Distance for 50 Cars",xlab="Speed in mph", ylab="Stopping Distance in feet")
mod1 = lm(formula = Total.Nights ~ Client.Gender, data = dat)
summary(mod1)
mod1 = lm(formula = Total.Nights ~ Client.Gender + Client.Age.at.Entry, data = dat)
summary(mod1)
mod1 = lm(formula = Total.Nights ~ Client.Gender + Client.Age.at.Entry + Client.Ethnicity, data = dat)
summary(mod1)
mod1 = lm(formula = Total.Nights ~ Client.Gender + Client.Age.at.Entry + Client.Ethnicity, data = dat) + Client.Primary.Race
mod1 = lm(formula = Total.Nights ~ Client.Gender + Client.Age.at.Entry + Client.Ethnicity + Client.Primary.Race, data = dat)
summary(mod1)
install.packages('reticulate', repo="http://cran.us.r-project.org")
library(reticulate)
#install.packages('reticulate', repo="http://cran.us.r-project.org")
rmarkdown::render("bios611_project3.Rmd", "html_document")
setwd("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3/data")
#install.packages('reticulate', repo="http://cran.us.r-project.org")
rmarkdown::render("~/Desktop/611 Notes/bios611-projects-fall-2019-cwzhou/project_3/scripts/bios611_project3.Rmd", "html_document")
