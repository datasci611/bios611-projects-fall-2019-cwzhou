df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = lag(first_year))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = diff(last_year,first_year))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = as.difftime(last_year,first_year))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = as.difftime(,unit="years"))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = as.difftime(unit="years"))
dt <- as.Date("2010/02/10")
new.dt <- dt - as.difftime(2, unit="days")
new.dt
as.difftime(2, unit="days")
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = as.difftime(last_year-first_year,unit="years"))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = 1-2)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = first(Year),
last_year = last(Year),
difference = first_year+1)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = last(Year),
difference = 1)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = last(Year),
difference = first_year+1)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = last(Year),
difference = last_year-first_year+1)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
difference = last_year-first_year+1)
df2 = df1 %>%
arrange(Client.File.Number,Date) %>%
select(Date, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Date >= "2000-01-01")%>% #to stay up to date with current trends, we will only examine data in the last 10 years (2000-01-01 to 2019-08-31)
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarise(no_dates = n(),
max_food = max(Food.Provided.for),
min_food = min(Food.Provided.for),
mean_food_pounds_per_day = mean(Food.Pounds))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1) %>%
family = as.factor(ifelse(Food.Provided.for>1,1,0)) #create indicator: if food.provided.for > 1 then family = 1 else family = 0
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = family)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
family = as.factor(ifelse(Food.Provided.for>1,1,0)) %>% #create indicator: if food.provided.for > 1 then family = 1 else family = 0
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = family)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
family = ifelse(Food.Provided.for>1,1,0) %>% #create indicator: if food.provided.for > 1 then family = 1 else family = 0
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = family)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
family = ifelse(df1$Food.Provided.for>1,1,0) %>% #create indicator: if food.provided.for > 1 then family = 1 else family = 0
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = family)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = if.else(Food.Provided.for > 1 ,1 ,0))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = ifelse(Food.Provided.for > 1 ,1 ,0))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = as.factor(ifelse(Food.Provided.for > 1 ,1 ,0)))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1,
family = as.numeric(ifelse(Food.Provided.for > 1 ,1 ,0)))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1)
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1) %>%
arrange(desc(no_years))
library(tidyverse)
library(mclust)
# Set the random seed
set.seed(0)
# Generate example data set
N = 30
U1 = 1
U2 = 4.5
gene_df = rbind(tibble(gene_a = rnorm(n=N, mean=U2), gene_b = rnorm(n=N, mean=U1), explant_id = seq(1, N), type = 1),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U1), explant_id = seq(N+1, 2*N), type = 2),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U2), explant_id = seq((2*N)+1, 3*N), type = 3))
gene_df$type = as.factor(gene_df$type)
View(gene_df)
ggplot(gene_df, aes(gene_a, gene_b)) +
geom_point(size=2, alpha=0.75)
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(10)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
fit
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(5)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(15)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(10)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(3)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(4)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(3)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(gene_df, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
ggplot(cluster_fit, aes(num_centers, diff_wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
ggplot(cluster_fit, aes(num_centers, diff_wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(10)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(gene_df, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
ggplot(cluster_fit, aes(num_centers, diff_wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
library(mclust)
# Set the random seed
set.seed(0)
# Generate example data set
N = 30
U1 = 1
U2 = 4.5
gene_df = rbind(tibble(gene_a = rnorm(n=N, mean=U2), gene_b = rnorm(n=N, mean=U1), explant_id = seq(1, N), type = 1),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U1), explant_id = seq(N+1, 2*N), type = 2),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U2), explant_id = seq((2*N)+1, 3*N), type = 3))
gene_df$type = as.factor(gene_df$type)
#View(gene_df)
ggplot(gene_df, aes(gene_a, gene_b)) +
geom_point(size=2, alpha=0.75)
#-------------------------
# K-means clustering
#-------------------------
fit = gene_df %>%
select(gene_a, gene_b) %>%
kmeans(10)
# Append cluster assignment
gene_df$cluster = as.factor(fit$cluster)
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
#-------------------------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(gene_df, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
ggplot(cluster_fit, aes(num_centers, diff_wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
#-------------------------
# Hierarchical clustering
#-------------------------
# Calculate distance between all observations
dist_mat = gene_df %>%
select(gene_a, gene_b) %>%
dist(method = "euclidean")
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="average")
plot(hfit)
# Append cluster assignment
groups = cutree(hfit, k=3)
gene_df$cluster_h = as.factor(groups)
rect.hclust(hfit, k=3, border="red")
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster_h)) +
geom_point(size=2, alpha=0.75, aes(color=cluster_h))
#-------------------------
# EM Clustering
# http://rstudio-pubs-static.s3.amazonaws.com/154174_78c021bc71ab42f8add0b2966938a3b8.html
#-------------------------
em_fit = fit = gene_df %>%
select(gene_a, gene_b) %>%
Mclust(G=3)
# Append cluster assignment
gene_df$cluster = as.factor(em_fit$classification)
gene_df$uncertainty = -em_fit$uncertainty
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(alpha=0.75, aes(color=cluster, size=-uncertainty))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1) %>%
arrange(desc(no_years))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1) %>%
arrange(desc(no_years, first_year))
df1 %>%
arrange(Client.File.Number,Date) %>%
select(Year, Client.File.Number,Food.Provided.for, Food.Pounds) %>%
filter(Year >= "2000") %>%
drop_na(Food.Provided.for, Food.Pounds) %>% #only keep rows that do not have missing variables food.provided.for and food.pounds
group_by(Client.File.Number) %>%
summarize(no_visits = n(),
first_year = as.numeric(first(Year)),
last_year = as.numeric(last(Year)),
no_years = last_year-first_year+1) %>%
arrange(desc(no_years, as.date(first_year)))
View(urban)
View(arrange(desc(urban$Date)))
arrange(desc(urban$Date))
urban$Date
tail(df2)
tail(df1)
install.packages(c("ggridges", "hexbin"))
install.packages(c("DescTools", "ggcorrplot", "plotly"))
install.packages(c("DescTools", "ggcorrplot", "plotly"))
View(UMD)
View(urban)
View(arrange(urban,date))
View(arrange(urban,Date))
View(arrange(urban,desc(Date))))
View(arrange(urban,desc(Date)))
View(arrange(df1,desc(Date)))
